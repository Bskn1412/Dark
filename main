# Ensure you have run these commands in your environment before running the script
# Use GOOGLE Colab for better experience 
!pip install openai
!pip install pyTelegramBotAPI requests
!pip install torch diffusers
!pip install spacy
!python -m spacy download en_core_web_sm
!pip install accelerate
!pip install transformers
!pip install geonamescache
!pip install ultralytics==8.0.196

#import
import telebot
import os
import openai
from openai import OpenAI
import requests
from PIL import Image
import io
from diffusers import StableDiffusionPipeline
import torch
from transformers import BlipProcessor, BlipForQuestionAnswering
import re
import spacy
import geonamescache


TelegramBOT_TOKEN  =  'YOUR TELEGRAM API'
OPENAI_API_KEY = "YOUR OPENAI API KEY"
OPENWEATHER_API_KEY = 'YOUR OPEN WEATHER API'
ALPHA_VANTAGE_API_KEY = 'YOUR ALPHAVINTAGE API' # Visit ALPHAVINTAGE official site for Stock API
client = OpenAI(api_key=OPENAI_API_KEY)
image_path = 'received_image.jpg'


bot = telebot.TeleBot(TelegramBOT_TOKEN)


def get_all_cities():
    gc = geonamescache.GeonamesCache()
    cities = gc.get_cities()
    city_names = [city['name'].lower() for city in cities.values()]
    return city_names

def extract_city(text):
    text = text.lower()

    city_names = get_all_cities()

    for city in city_names:
        if re.search(r'\b' + re.escape(city) + r'\b', text):
            return city
    return None

def get_stock_symbol(company_name, api_key):
    url = f'https://www.alphavantage.co/query?function=SYMBOL_SEARCH&keywords={company_name}&apikey={api_key}'
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if 'bestMatches' in data and len(data['bestMatches']) > 0:
            return data['bestMatches'][0]['1. symbol']
        else:
            return None
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
    except requests.exceptions.RequestException as req_err:
        print(f"Error occurred: {req_err}")
    except ValueError:
        print("Invalid response received from the server")
    return None

def get_stock_price(symbol, api_key):
    url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={api_key}'
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if 'Global Quote' in data:
            return data['Global Quote']['05. price']
        else:
            return None
    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
    except requests.exceptions.RequestException as req_err:
        print(f"Error occurred: {req_err}")
    except ValueError:
        print("Invalid response received from the server")
    return None


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.send_message(message.chat.id,'‚≠ê A POWERFUL AI BOT FROM YK ‚≠ê')
    bot.send_message(message.chat.id, "This BOT capable of doing things like \n ‚ú® Chat Bot \n ‚ú® Image Q/A \n ‚ú® Stock Prices \n ‚ú® Medical Advice \n ‚ú® Weather Forecasts \n ‚ú® Educational Assistant \n ‚ú® Recipe & Cooking Tips \n ‚ú® Text-to-Image Generation \n ‚ú® Language Translation Services \n ‚ú® Movies & Series Recommendation \n")


@bot.message_handler(content_types=['photo'])
def handle_image(message):
    try:
        file_id = message.photo[-1].file_id
        file_info = bot.get_file(file_id)


        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{TelegramBOT_TOKEN}/{file_path}"
        file_response = requests.get(file_url)


        image_path = "received_image.jpg"
        with open(image_path, 'wb') as f:
            f.write(file_response.content)


        bot.reply_to(message, "Image received and saved!")
        bot.reply_to(message, "Must use **In above image** before asking your question each time")

    except Exception as e:
        bot.reply_to(message, f"An error occurred: {str(e)}")


@bot.message_handler(func=lambda message: True)
def handle_message(message):
  try :
     reply_message = bot.reply_to(message, "Please wait a Bit....")
     reply_message_id = reply_message.message_id
     print(message.text)
     result = list(map(str.lower, message.text.split(' ')))
     check = ''

     for i in ['image','img','png','jpg','icon','logo']:
         if i in result:
             check = 'image'
             break
     if 'in above image' in message.text.lower():
         check = 'question'
     for i in ['temperature','tmp','degree','weather']:
         if i in result:
             check = 'weather'
             break
     for i in ['stock','price']:
         if i in result:
             check = 'stock'
             break

     print(check.lower())
     #image genration
     if(check == 'image'):
       try:
           text = message.text

           model_id = "dreamlike-art/dreamlike-photoreal-2.0"
           pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
           pipe = pipe.to("cuda")
           prompt = text
           image = pipe(prompt).images[0]

           image.save("received_image.jpg")

           bot.delete_message(message.chat.id, reply_message_id)
           bot.send_photo(message.chat.id, image)

       except Exception as e:
           print(f"An error occurred: {e}")
           bot.send_message(message.chat.id, "Sorry üòû ,Currently Not Working \n")
           bot.send_message(message.chat.id, "But Still you can use üòâ\n1)Image Q/A\n2)Code Generator\n3)Chat GPT-3.5\n")
     #image Q/A
     elif (check == 'question'):
             try:
                   if image_path == '':
                       bot.delete_message(message.chat.id, reply_message_id)
                       bot.reply_to(message, "Please upload an image first")
                       return

                   text = message.text

                   processor = BlipProcessor.from_pretrained("Salesforce/blip-vqa-base")
                   model = BlipForQuestionAnswering.from_pretrained("Salesforce/blip-vqa-base")


                   # raw_image = Image.open(requests.get(image_path, stream=True).raw).convert('RGB')
                   raw_image = Image.open(image_path).convert('RGB')

                   inputs = processor(raw_image, text, return_tensors="pt")

                   out = model.generate(**inputs, max_new_tokens=50)
                   answer = processor.decode(out[0], skip_special_tokens=True)
                   bot.delete_message(message.chat.id, reply_message_id)
                   bot.reply_to(message, answer)

             except Exception as e:
                   print(f"An error occurred: {e}")
                   bot.reply_to(message, "Sorry üòî, Unable to Identify the image..")
     #weather
     elif(check == 'weather'):
        text = message.text
        city = extract_city(text)

        response = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}')
        data = response.json()
        if data['cod'] == 200:
            temp = data['main']['temp'] - 273.15  # Convert from Kelvin to Celsius
            weather_description = data['weather'][0]['description']
            bot.delete_message(message.chat.id, reply_message_id)
            bot.send_message(message.chat.id, f"{weather_description}\nTemperature: {temp:.2f} ¬∞C")
        else:
            bot.delete_message(message.chat.id, reply_message_id)
            bot.reply_to(message, 'Sorry, I could not find that city.')
     #stock
     elif(check == 'stock'):

               nlp = spacy.load("en_core_web_sm")

               def extract_company_names(text):
                   # Process the text with SpaCy
                   doc = nlp(text)

                   # Extract company names
                   company_names = [ent.text for ent in doc.ents if ent.label_ == "ORG"]

                   return company_names

               company = extract_company_names(message.text)
               if not company:
                   bot.reply_to(message, "Please Enter Company name with Title case (ex: Google,Tesla) ")
                   return
               company = company[0]
               print(company)

               symbol = get_stock_symbol(company, ALPHA_VANTAGE_API_KEY)
               bot.delete_message(message.chat.id, reply_message_id)
               if symbol:
                   price = get_stock_price(symbol, ALPHA_VANTAGE_API_KEY)
                   if price:
                       bot.reply_to(message, f'The current price of {company} ({symbol}) is: ${price}')
                   else:
                       bot.reply_to(message, f'Failed to retrieve the stock price for symbol: {symbol}')
               else:
                   bot.reply_to(message, f'Could not find stock symbol for company: {company}')
     #gpt
     else:

           print(message)
           completion = client.chat.completions.create(
           model="gpt-3.5-turbo",
           messages=[
             {"role": "user", "content": message.text},
           ]
             )
           bot.delete_message(message.chat.id, reply_message_id)
           bot.send_message(message.chat.id, completion.choices[0].message.content)

except Exception as e:
        print(f"An error occurred: {e}")
        bot.reply_to(message, "Sorry, I couldn't process your request.")

bot.polling()
